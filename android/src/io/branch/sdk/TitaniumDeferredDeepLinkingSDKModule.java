/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2010 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package io.branch.sdk;

import android.app.Activity;

import java.util.ArrayList;
import java.util.Iterator;

import io.branch.referral.Branch;
import io.branch.referral.BranchError;

import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;

import org.appcelerator.titanium.TiApplication;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.kroll.common.TiConfig;
import org.appcelerator.kroll.KrollDict;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;


@Kroll.module(name="TitaniumDeferredDeepLinkingSDK", id="io.branch.sdk")
public class TitaniumDeferredDeepLinkingSDKModule extends KrollModule
{

	// Standard Debugging variables
	private static final String LCAT = "TitaniumDeferredDeepLinkingSDKModule";
	private static final boolean DBG = TiConfig.LOGD;

	// You can define constants with @Kroll.constant, for example:
	// @Kroll.constant public static final String EXTERNAL_NAME = value;

	public TitaniumDeferredDeepLinkingSDKModule()
	{
		super();
	}

	@Kroll.onAppCreate
	public static void onAppCreate(TiApplication app)
	{
		Log.d(LCAT, "inside onAppCreate");
		// put module init code that needs to run when the application is created
	}

	//----------- Methods ----------//
	// Public Methods
	@Kroll.method
	public void initSession()
	{
		Log.d(LCAT, "start init");
		final Activity activity = this.getActivity();
		final Branch instance = Branch.getInstance(activity);

		instance.initSession(new SessionListener(), activity.getIntent().getData(), activity);
	}

	@Kroll.method
	public void getAutoInstance()
	{
		Log.d(LCAT, "start getAutoInstance");
		final Activity activity = this.getActivity();
		final Branch instance = Branch.getAutoInstance(TiApplication.getInstance());

		instance.initSession(new SessionListener(), activity.getIntent().getData(), activity);
	}

	@Kroll.method
	public void setDebug(boolean enable)
	{
		Log.d(LCAT, "start setDebug");
		final Activity activity = this.getActivity();
		final Branch instance = Branch.getInstance(activity);

		if (enable) {
			instance.setDebug();
		}
	}

	@Kroll.method
	public KrollDict getLatestReferringParams()
	{
		Log.d(LCAT, "start getLatestReferringParams");
		final Activity activity = this.getActivity();
		final Branch instance = Branch.getInstance(activity);

		JSONObject sessionParams = instance.getLatestReferringParams();
		if (sessionParams == null) {
    		Log.d(LCAT, "return is null");
    		return null;
    	} else {
    		Log.d(LCAT, "return is not null");
    		Log.d(LCAT, sessionParams.toString());
    	}

    	return createSessionDict(sessionParams);
	}

	@Kroll.method
	public KrollDict getFirstReferringParams()
	{
		Log.d(LCAT, "start getFirstReferringParams");
		final Activity activity = this.getActivity();
		final Branch instance = Branch.getInstance(activity);

		JSONObject installParams = instance.getFirstReferringParams();
		if (installParams == null) {
    		Log.d(LCAT, "return is null");
    		return null;
    	} else {
    		Log.d(LCAT, "return is not null");
    		Log.d(LCAT, installParams.toString());
    	}

    	return createSessionDict(installParams);
	}

	@Kroll.method
	public void setIdentity(String identity)
	{
		Log.d(LCAT, "start setIdentity");
		final Activity activity = this.getActivity();
		final Branch instance = Branch.getInstance(activity);

		instance.setIdentity(identity);
	}

	@Kroll.method
	public void userCompletedAction(String action)
	{
		Log.d(LCAT, "start userCompletedAction");
		final Activity activity = this.getActivity();
		final Branch instance = Branch.getInstance(activity);

		instance.userCompletedAction(action);
	}

	@Kroll.method
	public void userCompletedActionWithAppstate(String action, JSONObject appState)
	{
		Log.d(LCAT, "start userCompletedAction with appState");
		final Activity activity = this.getActivity();
		final Branch instance = Branch.getInstance(activity);

		instance.userCompletedAction(action, appState);
	}

	@Kroll.method
	public void loadRewards()
	{
		Log.d(LCAT, "start loadRewards");
		final Activity activity = this.getActivity();
		final Branch instance = Branch.getInstance(activity);

		instance.loadRewards(new LoadRewardsListener());
	}

	@Kroll.method
	public void redeemRewards(int value)
	{
		Log.d(LCAT, "start redeemRewards");
		final Activity activity = this.getActivity();
		final Branch instance = Branch.getInstance(activity);

		instance.redeemRewards(value);
	}

	@Kroll.method
	public void getCreditHistory()
	{
		Log.d(LCAT, "start getCreditHistory");
		final Activity activity = this.getActivity();
		final Branch instance = Branch.getInstance(activity);

		instance.getCreditHistory(new CreditHistoryListener());
	}

	@Kroll.method
	public void logout()
	{
		Log.d(LCAT, "start logout");
		final Activity activity = this.getActivity();
		final Branch instance = Branch.getInstance(activity);

		instance.logout();
	}

	// Private Methods
	private KrollDict createSessionDict(JSONObject data) {
		Log.d(LCAT, "start createSessionDict");
		KrollDict sessionDict = new KrollDict();
		if (data.has("~channel")) {
			sessionDict.put("~channel", data.optString("~channel"));
		}
    	if (data.has("~feature")) {
			sessionDict.put("~feature", data.optString("~feature"));
		}
		if (data.has("~tags")) {
			sessionDict.put("~tags", data.optString("~tags"));
		}
		if (data.has("~campaign")) {
			sessionDict.put("~campaign", data.optString("~campaign"));
		}
		if (data.has("~stage")) {
			sessionDict.put("~stage", data.optString("~stage"));
		}
		if (data.has("~creation_source")) {
			sessionDict.put("~creation_source", data.optString("~creation_source"));
		}
		if (data.has("+match_guaranteed")) {
			sessionDict.put("+match_guaranteed", data.optBoolean("+match_guaranteed"));
		}
		if (data.has("+referrer")) {
			sessionDict.put("+referrer", data.optString("+referrer"));
		}
		if (data.has("+phone_number")) {
			sessionDict.put("+phone_number", data.optString("+phone_number"));
		}
		if (data.has("+is_first_session")) {
			sessionDict.put("+is_first_session", data.optBoolean("+is_first_session"));
		}
		if (data.has("+clicked_branch_link")) {
			sessionDict.put("+clicked_branch_link", data.optBoolean("+clicked_branch_link"));
		}
		if (data.has("+click_timestamp")) {
			sessionDict.put("+click_timestamp", data.optBoolean("+click_timestamp"));
		}
    	return sessionDict;
	}

	private KrollDict parseJSONObject(JSONObject jsonObject) {
		Log.d(LCAT, "start parseJSONObject");
		KrollDict dict = new KrollDict();
		Iterator<?> keys = jsonObject.keys();

		while(keys.hasNext()) {
		    String key = (String)keys.next();
		    Log.d(LCAT, "processing key: " + key);
		    if (jsonObject.opt(key) instanceof JSONObject) {
		    	Log.d(LCAT, "recursing...");
		    	JSONObject jsonObj;
		    	try {
					jsonObj = jsonObject.getJSONObject(key);
					KrollDict tempDict = new KrollDict();
			    	tempDict = parseJSONObject(jsonObj);
			    	dict.put(key, tempDict);
				}
				catch (JSONException exception) {
					Log.d(LCAT, "invalid json passed");
				}
    		} else {
    			Log.d(LCAT, "not recursing...");
    			dict.put(key, jsonObject.opt(key));
    		}
		}

		return dict;
	}

	//----------- Inner Classes: Listeners ----------//
    protected class SessionListener implements Branch.BranchReferralInitListener
    {
    	// Listener that implements BranchReferralInitListener for initSession
        @Override
        public void onInitFinished(JSONObject referringParams, BranchError error) {
        	Log.d(LCAT, "inside onInitFinished");
        	TitaniumDeferredDeepLinkingSDKModule self = TitaniumDeferredDeepLinkingSDKModule.this;
        	if (error == null) {
	            // params are the deep linked params associated with the link that the user clicked -> was re-directed to this app
	            // params will be empty if no data found
	        	if (referringParams == null) {
	        		Log.d(LCAT, "return is null");
	        		return;
	        	} else {
	        		Log.d(LCAT, "return is not null");
	        		Log.d(LCAT, referringParams.toString());
	        	}

	        	self.fireEvent("bio:initSession", createSessionDict(referringParams));
	        } else {
	        	String errorMessage = error.getMessage();
	            Log.d(LCAT, errorMessage);
	            KrollDict response = new KrollDict();
	            response.put("error", errorMessage);
	            self.fireEvent("bio:initSession", response);
	        }
        }
    }

    protected class LoadRewardsListener implements Branch.BranchReferralStateChangedListener
    {
    	// Listener that implements BranchReferralStateChangedListener for loadRewards
    	@Override
	    public void onStateChanged(boolean changed, BranchError error) {
	        // changed boolean will indicate if the balance changed from what is currently in memory
	        Log.d(LCAT, "inside onStateChanged");
	        TitaniumDeferredDeepLinkingSDKModule self = TitaniumDeferredDeepLinkingSDKModule.this;
	        KrollDict response = new KrollDict();
	        if (error == null) {
	            // will return the balance of the current user's credits
	            final Activity activity = self.getActivity();
				final Branch instance = Branch.getInstance(activity);
	        	int credits = instance.getCredits();
	        	response.put("credits", credits);
	        } else {
	        	String errorMessage = error.getMessage();
	            Log.d(LCAT, errorMessage);
	            response.put("error", errorMessage);
	        }
	        self.fireEvent("bio:loadRewards", response);

	    }
    }

    protected class CreditHistoryListener implements Branch.BranchListResponseListener
    {
    	// Listener that implements BranchListResponseListener for getCreditHistory
    	@Override
	    public void onReceivingResponse(JSONArray list, BranchError error) {
	        // changed boolean will indicate if the balance changed from what is currently in memory
	        Log.d(LCAT, "inside onReceivingResponse");
	        TitaniumDeferredDeepLinkingSDKModule self = TitaniumDeferredDeepLinkingSDKModule.this;
	        if (error == null) {
	            // show the list in your app
	            ArrayList<KrollDict> data = new ArrayList<KrollDict>();
				if (list != null) {
					int len = list.length();
					for (int i = 0; i < len; i++) {
						JSONObject jsonObject;
						try {
							jsonObject = list.getJSONObject(i);
							KrollDict dict = parseJSONObject(jsonObject);
							data.add(dict);
						}
						catch (JSONException exception) {
							Log.d(LCAT, "Invalid JSONObject passed");
							return;
						}
					}
				}
	            self.fireEvent("bio:getCreditHistory", data);
	        } else {
	        	String errorMessage = error.getMessage();
	            Log.d(LCAT, errorMessage);
	            KrollDict response = new KrollDict();
	            response.put("error", errorMessage);
	            self.fireEvent("bio:getCreditHistory", response);
	        }
	    }
    }
}

